{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\MERN stack\\\\to_do_list\\\\client\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport { createContext } from \"react\";\nimport { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n\n  // Get all notes\n  const getNotes = async () => {\n    const response = await fetch(`http://localhost:5000/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": `${localStorage.getItem('auth')}`\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(json);\n  };\n\n  // Add a Note\n  const addNote = async (title, description, tag) => {\n    // TODO: API Call\n    // API Call \n    const response = await fetch(`http://localhost:5000/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": `${localStorage.getItem('auth')}`\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    console.log(note);\n    setNotes(notes.concat(note));\n  };\n\n  // Delete a Note\n  const deleteNote = async id => {\n    const response = await fetch(`http://localhost:5000/api/notes/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": `${localStorage.getItem('auth')}`\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n\n    // fuckyoubitch api call krna baki h\n    console.log(\"Deleting note with id \", id);\n    const newNotes = notes.filter(note => {\n      return note._id != id;\n    });\n    setNotes(newNotes);\n  };\n\n  // Update a Note\n  const editNote = async (id, title, description, tag) => {\n    const response = await fetch(`http://localhost:5000/api/notes/updatenote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": `${localStorage.getItem('auth')}`\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    let newNotes = JSON.parse(JSON.stringify(notes));\n    for (let ind = 0; ind < newNotes.length; ind++) {\n      const element = newNotes[ind];\n      if (element._id == id) {\n        newNotes[ind].title = title;\n        newNotes[ind].description = description;\n        newNotes[ind].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNotes);\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      setNotes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["createContext","useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","localStorage","getItem","json","console","log","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","newNotes","filter","_id","editNote","parse","ind","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Desktop/MERN stack/to_do_list/client/src/context/notes/NoteState.js"],"sourcesContent":["import { createContext } from \"react\";\r\nimport { useState } from \"react\";\r\nimport NoteContext from \"./noteContext\";\r\n\r\nconst NoteState = (props) => {\r\n  const notesInitial = [];\r\n\r\n  const [notes, setNotes] = useState(notesInitial);\r\n\r\n  // Get all notes\r\n  const getNotes = async () => {\r\n    const response = await fetch(`http://localhost:5000/api/notes/fetchallnotes`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          `${localStorage.getItem('auth')}`,\r\n      },\r\n    });\r\n\r\n    const json = await response.json();\r\n    console.log(json);\r\n    setNotes(json);\r\n  };\r\n\r\n  // Add a Note\r\n  const addNote = async (title, description, tag) => {\r\n      // TODO: API Call\r\n      // API Call \r\n      const response = await fetch(`http://localhost:5000/api/notes/addnote`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          \"auth-token\": `${localStorage.getItem('auth')}`\r\n        },\r\n        body: JSON.stringify({title, description, tag})\r\n      });\r\n  \r\n      const note = await response.json();\r\n      console.log(note);\r\n      setNotes(notes.concat(note))\r\n    };\r\n\r\n  // Delete a Note\r\n  const deleteNote = async (id) => {\r\n    const response = await fetch(`http://localhost:5000/api/notes/deletenote/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          `${localStorage.getItem('auth')}`,\r\n      },\r\n    });\r\n\r\n    const json = await response.json();\r\n    console.log(json);\r\n\r\n    // fuckyoubitch api call krna baki h\r\n    console.log(\"Deleting note with id \", id);\r\n    const newNotes = notes.filter((note) => {\r\n      return note._id != id;\r\n    });\r\n    setNotes(newNotes);\r\n  };\r\n\r\n  // Update a Note\r\n  const editNote = async (id, title, description, tag) => {\r\n    const response = await fetch(`http://localhost:5000/api/notes/updatenote/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          `${localStorage.getItem('auth')}`,\r\n      },\r\n      body: JSON.stringify({ title, description, tag }),\r\n    });\r\n    const json = await response.json();\r\n\r\n    let newNotes = JSON.parse(JSON.stringify(notes));\r\n    for(let ind = 0; ind < newNotes.length; ind++) {\r\n      const element = newNotes[ind];\r\n      if(element._id == id) {\r\n            newNotes[ind].title = title;\r\n            newNotes[ind].description = description;\r\n            newNotes[ind].tag = tag;\r\n            break;\r\n      }\r\n    }\r\n\r\n    setNotes(newNotes);\r\n\r\n  };\r\n\r\n  return (\r\n    <NoteContext.Provider\r\n      value={{ notes, setNotes, addNote, deleteNote, editNote, getNotes }}\r\n    >\r\n      {props.children}\r\n    </NoteContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NoteState;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}